// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/30/2020 06:45:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ACC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ACC_vlg_sample_tst(
	ALU0,
	ALU1,
	ALU2,
	ALU3,
	C8,
	C9,
	C10,
	C11,
	MDR0,
	MDR1,
	MDR2,
	MDR3,
	sampler_tx
);
input  ALU0;
input  ALU1;
input  ALU2;
input  ALU3;
input  C8;
input  C9;
input  C10;
input  C11;
input  MDR0;
input  MDR1;
input  MDR2;
input  MDR3;
output sampler_tx;

reg sample;
time current_time;
always @(ALU0 or ALU1 or ALU2 or ALU3 or C8 or C9 or C10 or C11 or MDR0 or MDR1 or MDR2 or MDR3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ACC_vlg_check_tst (
	ACC0out,
	ACC1out,
	ACC2out,
	ACC3out,
	sampler_rx
);
input  ACC0out;
input  ACC1out;
input  ACC2out;
input  ACC3out;
input sampler_rx;

reg  ACC0out_expected;
reg  ACC1out_expected;
reg  ACC2out_expected;
reg  ACC3out_expected;

reg  ACC0out_prev;
reg  ACC1out_prev;
reg  ACC2out_prev;
reg  ACC3out_prev;

reg  ACC0out_expected_prev;
reg  ACC1out_expected_prev;
reg  ACC2out_expected_prev;
reg  ACC3out_expected_prev;

reg  last_ACC0out_exp;
reg  last_ACC1out_exp;
reg  last_ACC2out_exp;
reg  last_ACC3out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	ACC0out_prev = ACC0out;
	ACC1out_prev = ACC1out;
	ACC2out_prev = ACC2out;
	ACC3out_prev = ACC3out;
end

// update expected /o prevs

always @(trigger)
begin
	ACC0out_expected_prev = ACC0out_expected;
	ACC1out_expected_prev = ACC1out_expected;
	ACC2out_expected_prev = ACC2out_expected;
	ACC3out_expected_prev = ACC3out_expected;
end



// expected ACC0out
initial
begin
	ACC0out_expected = 1'bX;
end 

// expected ACC1out
initial
begin
	ACC1out_expected = 1'bX;
end 

// expected ACC2out
initial
begin
	ACC2out_expected = 1'bX;
end 

// expected ACC3out
initial
begin
	ACC3out_expected = 1'bX;
end 
// generate trigger
always @(ACC0out_expected or ACC0out or ACC1out_expected or ACC1out or ACC2out_expected or ACC2out or ACC3out_expected or ACC3out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ACC0out = %b | expected ACC1out = %b | expected ACC2out = %b | expected ACC3out = %b | ",ACC0out_expected_prev,ACC1out_expected_prev,ACC2out_expected_prev,ACC3out_expected_prev);
	$display("| real ACC0out = %b | real ACC1out = %b | real ACC2out = %b | real ACC3out = %b | ",ACC0out_prev,ACC1out_prev,ACC2out_prev,ACC3out_prev);
`endif
	if (
		( ACC0out_expected_prev !== 1'bx ) && ( ACC0out_prev !== ACC0out_expected_prev )
		&& ((ACC0out_expected_prev !== last_ACC0out_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC0out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC0out_expected_prev);
		$display ("     Real value = %b", ACC0out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ACC0out_exp = ACC0out_expected_prev;
	end
	if (
		( ACC1out_expected_prev !== 1'bx ) && ( ACC1out_prev !== ACC1out_expected_prev )
		&& ((ACC1out_expected_prev !== last_ACC1out_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC1out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC1out_expected_prev);
		$display ("     Real value = %b", ACC1out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ACC1out_exp = ACC1out_expected_prev;
	end
	if (
		( ACC2out_expected_prev !== 1'bx ) && ( ACC2out_prev !== ACC2out_expected_prev )
		&& ((ACC2out_expected_prev !== last_ACC2out_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC2out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC2out_expected_prev);
		$display ("     Real value = %b", ACC2out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ACC2out_exp = ACC2out_expected_prev;
	end
	if (
		( ACC3out_expected_prev !== 1'bx ) && ( ACC3out_prev !== ACC3out_expected_prev )
		&& ((ACC3out_expected_prev !== last_ACC3out_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC3out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC3out_expected_prev);
		$display ("     Real value = %b", ACC3out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ACC3out_exp = ACC3out_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ACC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ALU0;
reg ALU1;
reg ALU2;
reg ALU3;
reg C8;
reg C9;
reg C10;
reg C11;
reg MDR0;
reg MDR1;
reg MDR2;
reg MDR3;
// wires                                               
wire ACC0out;
wire ACC1out;
wire ACC2out;
wire ACC3out;

wire sampler;                             

// assign statements (if any)                          
ACC i1 (
// port map - connection between master ports and signals/registers   
	.ACC0out(ACC0out),
	.ACC1out(ACC1out),
	.ACC2out(ACC2out),
	.ACC3out(ACC3out),
	.ALU0(ALU0),
	.ALU1(ALU1),
	.ALU2(ALU2),
	.ALU3(ALU3),
	.C8(C8),
	.C9(C9),
	.C10(C10),
	.C11(C11),
	.MDR0(MDR0),
	.MDR1(MDR1),
	.MDR2(MDR2),
	.MDR3(MDR3)
);

// ALU0
initial
begin
	ALU0 = 1'b1;
	ALU0 = #40000 1'b0;
end 

// ALU1
initial
begin
	ALU1 = 1'b1;
	ALU1 = #40000 1'b0;
end 

// ALU2
initial
begin
	ALU2 = 1'b1;
	ALU2 = #40000 1'b0;
end 

// ALU3
initial
begin
	ALU3 = 1'b1;
	ALU3 = #40000 1'b0;
end 

// C8
initial
begin
	C8 = 1'b1;
	C8 = #90000 1'b0;
	C8 = #10000 1'b1;
end 

// C9
initial
begin
	C9 = 1'b1;
	C9 = #10000 1'b0;
	C9 = #10000 1'b1;
	C9 = #90000 1'b0;
	C9 = #10000 1'b1;
	C9 = #10000 1'b0;
	C9 = #10000 1'b1;
	C9 = #10000 1'b0;
	C9 = #10000 1'b1;
end 

// C10
initial
begin
	C10 = 1'b0;
	C10 = #60000 1'b1;
	C10 = #20000 1'b0;
end 

// C11
initial
begin
	C11 = 1'b1;
	C11 = #30000 1'b0;
	C11 = #10000 1'b1;
	C11 = #20000 1'b0;
	C11 = #10000 1'b1;
end 

// MDR0
initial
begin
	MDR0 = 1'b0;
	MDR0 = #30000 1'b1;
	MDR0 = #10000 1'b0;
	MDR0 = #20000 1'b1;
	MDR0 = #20000 1'b0;
end 

// MDR1
initial
begin
	MDR1 = 1'b0;
	MDR1 = #30000 1'b1;
	MDR1 = #10000 1'b0;
	MDR1 = #20000 1'b1;
	MDR1 = #20000 1'b0;
end 

// MDR2
initial
begin
	MDR2 = 1'b0;
end 

// MDR3
initial
begin
	MDR3 = 1'b0;
end 

ACC_vlg_sample_tst tb_sample (
	.ALU0(ALU0),
	.ALU1(ALU1),
	.ALU2(ALU2),
	.ALU3(ALU3),
	.C8(C8),
	.C9(C9),
	.C10(C10),
	.C11(C11),
	.MDR0(MDR0),
	.MDR1(MDR1),
	.MDR2(MDR2),
	.MDR3(MDR3),
	.sampler_tx(sampler)
);

ACC_vlg_check_tst tb_out(
	.ACC0out(ACC0out),
	.ACC1out(ACC1out),
	.ACC2out(ACC2out),
	.ACC3out(ACC3out),
	.sampler_rx(sampler)
);
endmodule

