// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/30/2020 13:48:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    BR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BR_vlg_sample_tst(
	ALU0,
	ALU1,
	ALU2,
	ALU3,
	C14,
	Clear,
	sampler_tx
);
input  ALU0;
input  ALU1;
input  ALU2;
input  ALU3;
input  C14;
input  Clear;
output sampler_tx;

reg sample;
time current_time;
always @(ALU0 or ALU1 or ALU2 or ALU3 or C14 or Clear)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module BR_vlg_check_tst (
	ACC0,
	ACC1,
	ACC2,
	ACC3,
	sampler_rx
);
input  ACC0;
input  ACC1;
input  ACC2;
input  ACC3;
input sampler_rx;

reg  ACC0_expected;
reg  ACC1_expected;
reg  ACC2_expected;
reg  ACC3_expected;

reg  ACC0_prev;
reg  ACC1_prev;
reg  ACC2_prev;
reg  ACC3_prev;

reg  ACC0_expected_prev;
reg  ACC1_expected_prev;
reg  ACC2_expected_prev;
reg  ACC3_expected_prev;

reg  last_ACC0_exp;
reg  last_ACC1_exp;
reg  last_ACC2_exp;
reg  last_ACC3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	ACC0_prev = ACC0;
	ACC1_prev = ACC1;
	ACC2_prev = ACC2;
	ACC3_prev = ACC3;
end

// update expected /o prevs

always @(trigger)
begin
	ACC0_expected_prev = ACC0_expected;
	ACC1_expected_prev = ACC1_expected;
	ACC2_expected_prev = ACC2_expected;
	ACC3_expected_prev = ACC3_expected;
end



// expected ACC0
initial
begin
	ACC0_expected = 1'bX;
end 

// expected ACC1
initial
begin
	ACC1_expected = 1'bX;
end 

// expected ACC2
initial
begin
	ACC2_expected = 1'bX;
end 

// expected ACC3
initial
begin
	ACC3_expected = 1'bX;
end 
// generate trigger
always @(ACC0_expected or ACC0 or ACC1_expected or ACC1 or ACC2_expected or ACC2 or ACC3_expected or ACC3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ACC0 = %b | expected ACC1 = %b | expected ACC2 = %b | expected ACC3 = %b | ",ACC0_expected_prev,ACC1_expected_prev,ACC2_expected_prev,ACC3_expected_prev);
	$display("| real ACC0 = %b | real ACC1 = %b | real ACC2 = %b | real ACC3 = %b | ",ACC0_prev,ACC1_prev,ACC2_prev,ACC3_prev);
`endif
	if (
		( ACC0_expected_prev !== 1'bx ) && ( ACC0_prev !== ACC0_expected_prev )
		&& ((ACC0_expected_prev !== last_ACC0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC0_expected_prev);
		$display ("     Real value = %b", ACC0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ACC0_exp = ACC0_expected_prev;
	end
	if (
		( ACC1_expected_prev !== 1'bx ) && ( ACC1_prev !== ACC1_expected_prev )
		&& ((ACC1_expected_prev !== last_ACC1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC1_expected_prev);
		$display ("     Real value = %b", ACC1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ACC1_exp = ACC1_expected_prev;
	end
	if (
		( ACC2_expected_prev !== 1'bx ) && ( ACC2_prev !== ACC2_expected_prev )
		&& ((ACC2_expected_prev !== last_ACC2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC2_expected_prev);
		$display ("     Real value = %b", ACC2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ACC2_exp = ACC2_expected_prev;
	end
	if (
		( ACC3_expected_prev !== 1'bx ) && ( ACC3_prev !== ACC3_expected_prev )
		&& ((ACC3_expected_prev !== last_ACC3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC3_expected_prev);
		$display ("     Real value = %b", ACC3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ACC3_exp = ACC3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module BR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ALU0;
reg ALU1;
reg ALU2;
reg ALU3;
reg C14;
reg Clear;
// wires                                               
wire ACC0;
wire ACC1;
wire ACC2;
wire ACC3;

wire sampler;                             

// assign statements (if any)                          
BR i1 (
// port map - connection between master ports and signals/registers   
	.ACC0(ACC0),
	.ACC1(ACC1),
	.ACC2(ACC2),
	.ACC3(ACC3),
	.ALU0(ALU0),
	.ALU1(ALU1),
	.ALU2(ALU2),
	.ALU3(ALU3),
	.C14(C14),
	.Clear(Clear)
);

// ALU0
initial
begin
	ALU0 = 1'b0;
	ALU0 = #10000 1'b1;
	ALU0 = #10000 1'b0;
end 

// ALU1
initial
begin
	ALU1 = 1'b0;
	ALU1 = #10000 1'b1;
	ALU1 = #10000 1'b0;
end 

// ALU2
initial
begin
	ALU2 = 1'b0;
	ALU2 = #40000 1'b1;
	ALU2 = #10000 1'b0;
end 

// ALU3
initial
begin
	ALU3 = 1'b0;
	ALU3 = #40000 1'b1;
	ALU3 = #10000 1'b0;
end 

// C14
initial
begin
	C14 = 1'b0;
	C14 = #10000 1'b1;
	C14 = #10000 1'b0;
	C14 = #20000 1'b1;
	C14 = #10000 1'b0;
end 

// Clear
initial
begin
	Clear = 1'b0;
	Clear = #60000 1'b1;
	Clear = #10000 1'b0;
end 

BR_vlg_sample_tst tb_sample (
	.ALU0(ALU0),
	.ALU1(ALU1),
	.ALU2(ALU2),
	.ALU3(ALU3),
	.C14(C14),
	.Clear(Clear),
	.sampler_tx(sampler)
);

BR_vlg_check_tst tb_out(
	.ACC0(ACC0),
	.ACC1(ACC1),
	.ACC2(ACC2),
	.ACC3(ACC3),
	.sampler_rx(sampler)
);
endmodule

