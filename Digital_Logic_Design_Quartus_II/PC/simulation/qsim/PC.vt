// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/30/2020 07:43:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    PC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ADDR0;
reg ADDR1;
reg ADDR2;
reg ADDR3;
reg C0;
reg C1;
reg C2;
// wires                                               
wire ADDR0out;
wire ADDR1out;
wire ADDR2out;
wire ADDR3out;

// assign statements (if any)                          
PC i1 (
// port map - connection between master ports and signals/registers   
	.ADDR0(ADDR0),
	.ADDR0out(ADDR0out),
	.ADDR1(ADDR1),
	.ADDR1out(ADDR1out),
	.ADDR2(ADDR2),
	.ADDR2out(ADDR2out),
	.ADDR3(ADDR3),
	.ADDR3out(ADDR3out),
	.C0(C0),
	.C1(C1),
	.C2(C2)
);
initial 
begin 
#2000000 $finish;
end 

// ADDR3
initial
begin
	ADDR3 = 1'b0;
	ADDR3 = #1100000 1'b1;
	ADDR3 = #100000 1'b0;
end 

// ADDR2
initial
begin
	ADDR2 = 1'b0;
	ADDR2 = #1100000 1'b1;
	ADDR2 = #100000 1'b0;
end 

// ADDR1
initial
begin
	ADDR1 = 1'b0;
	ADDR1 = #1100000 1'b1;
	ADDR1 = #100000 1'b0;
end 

// ADDR0
initial
begin
	ADDR0 = 1'b0;
	ADDR0 = #1100000 1'b1;
	ADDR0 = #100000 1'b0;
end 

// C0
initial
begin
	C0 = 1'b1;
	C0 = #1400000 1'b0;
	C0 = #100000 1'b1;
end 

// C1
initial
begin
	C1 = 1'b1;
	C1 = #1100000 1'b0;
	C1 = #100000 1'b1;
end 

// C2
initial
begin
	C2 = 1'b1;
	C2 = #100000 1'b0;
	C2 = #100000 1'b1;
	C2 = #100000 1'b0;
	C2 = #100000 1'b1;
	C2 = #100000 1'b0;
	C2 = #100000 1'b1;
	C2 = #100000 1'b0;
	C2 = #100000 1'b1;
	C2 = #100000 1'b0;
	C2 = #100000 1'b1;
end 
initial 
begin 
#2000000 $finish;
end 
endmodule

